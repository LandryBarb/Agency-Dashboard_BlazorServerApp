@page "/client"
@page "/client/{id:int}"
@inject IClientService ClientService
@inject NavigationManager navMan

<h3>Client Upsert Page</h3>

@if (Id == null)
{
    <h3> Add New Client</h3>
}
else
{
    <h3> Edit @client.FirstName</h3>
}

@*Edit Form *@
<EditForm Model="client" OnSubmit="HandleSubmit">
    <div>
        <label for ="firstname">First Name</label>
        <InputText id="firstname" @bind-Value="client.FirstName" class="form-control"></InputText>
    </div>
       <div>
       <label for ="lastname">Last Name</label>
       <InputText id="lastname" @bind-Value="client.LastName" class="form-control"></InputText>
   </div>  
    <div>
     <label for="email">Email</label>
     <InputText id="email" @bind-Value="client.Email" class="form-control"></InputText>
 </div>
   <div>
       <label for="birthdate">Birthday</label>
       <InputDate id="birthdate" @bind-Value="client.Birthdate" class="form-control"></InputDate>
   </div>
   @* <div>
     <label for="age">Age</label>
     <InputNumber id="age" @bind-Value="client.Age" class="form-control"></InputNumber>
    </div>*@
     <div>
  <label for="headshots">Has headshots</label>
  <InputCheckbox id="headshots" @bind-Value="client.HasHeadShots" class="form-check"></InputCheckbox>
 </div>


    <br />
    <button type="submit" class="btn btn-secondary">@btnText</button>
    @if (Id != null)
    {
    <button type="button" class="btn btn-danger" @onclick="DeleteClient">Delete Client</button>
        
    }


</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Client client = new Client();

    protected override void OnInitialized()
    {
        btnText = Id == null ? "Save New Client" : "Update Client";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            client = await ClientService.GetSingleClient((int)Id);
        }

    }

    async Task HandleSubmit()
    {
        if(Id == null)
        {
            await ClientService.AddClient(client);
        }
        else
        {
            await ClientService.UpdateClient(client, (int)Id);
        }
    }

    async Task DeleteClient()
    {
        await ClientService.DeleteClient(client.Id);
    }

  //    public int GetAge()
  //{
  //    int year = DateTime.Now.Year;
  //    int age = year - (int)(client.Birthdate?.Year);
  //    return age;
  //}

}

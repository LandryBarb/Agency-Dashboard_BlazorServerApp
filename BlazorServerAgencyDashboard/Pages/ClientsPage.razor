@page "/clients"
@inject IClientService ClientService
@inject NavigationManager navMan

<h3>Clients</h3>


<table class="table">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Birthday</th>
            <th>Age</th>
            <th>Email</th>
            <th>Can Submit</th>
            <th>Minor</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var client in ClientService.Clients)
        {
            <tr>
                <td>@client.FirstName</td>
                <td>@client.LastName</td>

                 <td >@client.Birthdate?.ToShortDateString()</td>
                <td>@client.Age</td>
                <td>@client.Email</td>
              
                @if (client.CanSubmit())
                {
                    <td class="text-success">Yes</td>
                }
                else if(client.HasHeadShots == false)
                {
                    <td class="text-info">Missing Headshots</td>
                }
                else if(client.HasHeadShots == true && client.ClientIsMinor() == true)
                {
                    <td class="text-secondary">Needs approval</td>
                }
                else
                {
                    <td>No</td>
                }
                @if(client.ClientIsMinor())
                {
                    <td class="text-danger">Minor</td>

                }
                else
                {
                    <td class="text-success">Adult</td>
                    
                }
              

                <td>
                    <button class="btn btn-primary" @onclick="(() => ShowClient(client.Id))">
                        <i class ="oi oi-pencil"></i>
                    </button>
                </td>

            </tr>
        }
    </tbody>
</table>
<button class="btn btn-primary" @onclick = "AddNewClient">Add New Client</button>
@code {
    Client client = new Client();
    int ShowAge()
    {
        int calcAge = (int)client.Age;
        return calcAge;
    }

    int GetAge()
    {
        int currentYear = DateTime.Now.Year;
        int age = currentYear - client.Birthdate.Value.Year;
        int currentAge = (int)client.Age;
        return currentAge;
    }

    protected override async Task OnInitializedAsync()
    {
        await ClientService.GetClients();


    }

    void ShowClient(int id)
    {
        navMan.NavigateTo($"client/{id}");
    }
    void AddNewClient()
    {
        navMan.NavigateTo("client");
    }
}
